function p = dfdread(filename)
%DFDREAD Import data from a text file
%  PARTICLES = DFDREAD(FILENAME) reads data from text file FILENAME
%  for the default selection.  Returns the data as a table.
%
%  PARTICLES1 = DFDREAD(FILE, DATALINES) reads data for the specified
%  row interval(s) of text file FILENAME. Specify DATALINES as a
%  positive scalar integer or a N-by-2 array of positive scalar integers
%  for dis-contiguous row intervals.
%
%  Example:
%  particles = DFDREAD("D:\Sam\IceCovWaters\Camera_Data\test\particles.dfd", [1, Inf]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 15-Feb-2021 16:10:53
%
% See also: OTHER_FUNCTION_NAME1,  OTHER_FUNCTION_NAME2
% Author: Sam Hartharn-Evans
% School of Mathematics, Statistics and Physics, Newcastle University
% email address: s.hartharn-evans2@newcastle.ac.uk
% GitHub: https://github.com/HartharnSam
% 09-Feb-2022; Last revision: 09-Feb-2022
% MATLAB Version: 9.10.0.1602886 (R2021a)
%% Input handling
dataLines = [1, Inf];

%% Setup the Import Options
opts = delimitedTextImportOptions("NumVariables", 1);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = "";

% Specify column names and types
opts.VariableNames = "Main";
opts.VariableTypes = "char";
opts = setvaropts(opts, 1, "EmptyFieldRule", "auto");
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Import the data
particles = readtable(filename, opts);

%% Identify data on drawing
DrawInd = find(ismember(particles.Main, {'# Drawing'}));
DataStartInds = find(ismember(particles.Main, {'#Data: x,y,u,v'}));
DataEndInds = find(ismember(particles.Main, {'end_data; #vector'}));
DocumentationInds = find(ismember(particles.Main, {'# Documentation'}));

DataStartEndInds = [DataStartInds+1 DataEndInds-1]; % Start and end of each data slice
MetaData_StartEndInds = [DataEndInds [DataStartInds(2:end); DocumentationInds]]; % Start and end of documentation for each data slice

DrawingInfo = particles.Main(DrawInd:DataStartInds(1)-1);
Documentation = particles.Main(DocumentationInds:end);
% break into time slices
p.Data = cell(size(DataStartEndInds, 1), 1); p.DataInfo = p.Data;

for t = 1:size(DataStartEndInds, 1)
    temp_data = particles.Main(DataStartEndInds(t, 1):DataStartEndInds(t, 2));
    for i = 1:length(temp_data)
        p.Data{t}(i, :) = str2double(split(temp_data{i}))';
    end
    p.DataInfo{t} = [particles.Main(DataStartInds(t)); particles.Main(MetaData_StartEndInds(t, 1):MetaData_StartEndInds(t, 2))];
end
%% Extract Documentation Info
result = cell(length(Documentation), 1);
for i = 1:length(Documentation)
    result{i} = regexp(Documentation{i}, '.(?<name>\w+) := (?<value>[^,]+);', 'names');
end
result = result(~cellfun('isempty',result));

for i = 1:length(result)
    Documentations.(result{i}.name) = result{i}.value;
end
p.Documentation = Documentations;
clear result
%% Extract actual drawing info
count = 1;
for i = 1:length(DrawingInfo)
    if isempty(regexp(DrawingInfo{i}, "(draw_x_axis|draw_y_axis|draw_top_axis|draw_right_axis)", 'once'))
        holder = regexp(DrawingInfo{i}, '(?<name>[\w]+):=(?<value>[-0123456789.]+),', 'names');
        for ii = 1:length(holder)
            result{count} = holder(ii);
            count = count+1;
        end
    end
end
result = result(~cellfun('isempty',result));

for i = 1:length(result)
    DrawingInfos.(result{i}.name) = result{i}.value;
end
p.DrawingInfo = DrawingInfos;